name: Build

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run ci
      - name: Parse changelog
        uses: ./
        id: changelog
      - name: Display changelog
        run: |
          echo "Latest changelog entry:"
          echo "Version: \"${{ steps.changelog.outputs.version }}\""
          echo "  Major: \"${{ steps.changelog.outputs.versionMajor }}\""
          echo "  Minor: \"${{ steps.changelog.outputs.versionMinor }}\""
          echo "  Patch: \"${{ steps.changelog.outputs.versionPatch }}\""
          echo "Date: \"${{ steps.changelog.outputs.date }}\""
          echo "Status: \"${{ steps.changelog.outputs.status }}\""
          echo "Description: \"${{ steps.changelog.outputs.description }}\""
      - name: Publish coverage
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: coverallsapp/github-action@master
        with:
          path-to-lcov: ./build/coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish dist
        if: ${{ github.ref == 'refs/heads/master' }}
        shell: bash
        run: |
          if git diff-index --quiet HEAD; then
            git config user.name "Coditory CI"
            git config user.email "Coditory CI <admin@coditory.com>"
            git add -A
            git commit -a -m "Publish dist" -m "[ci-skip]"
            git push origin master
          else
            echo "Nothing to commit. Directory is up to date: ./build/dist"
          fi
      - name: Get last version from tag
        id: lasttag
        shell: bash
        run: echo ::set-output name=version::$(git describe --abbrev=0 --tags --match 'v[0-9]*' | cut -c2-)
      - name: Release
        if: "github.ref == 'refs/heads/master' && steps.changelog.outputs.status == 'release' && steps.changelog.outputs.version != steps.lasttag.outputs.version"
        shell: bash
        env:
          RELEASE_VERSION: ${{ steps.changelog.outputs.version }}
          RELEASE_VERSION_MAJOR: ${{ steps.changelog.outputs.versionMajor }}
        run: |
          git push origin :refs/tags/v${RELEASE_VERSION}
          git push origin :refs/tags/v${RELEASE_VERSION_MAJOR}
          git tag -f "v${RELEASE_VERSION}"
          git tag -f "v${RELEASE_VERSION_MAJOR}"
          git push origin --tags
      - name: GitHub Release
        if: "github.ref == 'refs/heads/master' && steps.changelog.outputs.status == 'release' && steps.changelog.outputs.version != steps.lasttag.outputs.version"
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ steps.changelog.outputs.description }}
          tag_name: v${{ steps.changelog.outputs.version }}
          release_name: Release v${{ steps.changelog.outputs.version }}
          draft: false
          prerelease: false
      - name: GitHub Release Major
        if: "github.ref == 'refs/heads/master' && steps.changelog.outputs.status == 'release' && steps.changelog.outputs.version != steps.lasttag.outputs.version"
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: "Major Release v${{ steps.changelog.outputs.versionMajor }}"
          tag_name: v${{ steps.changelog.outputs.versionMajor }}
          release_name: Release v${{ steps.changelog.outputs.versionMajor }}
          draft: false
          prerelease: false
